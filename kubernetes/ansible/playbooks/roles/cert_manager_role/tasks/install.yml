- name: Cert-manager | Template namespace manifest
  template:
    src: cert-manager-namespace.yml
    dest: "{{ grayskull_dir }}/cert-manager-namespace.yml"

- name: Cert-manager | Create namespace manifest
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ grayskull_dir }}/cert-manager-namespace.yml"
    state: latest

- name: Cert-manager | Apply custom resource definitions
  shell: "{{ bin_dir }}/kubectl apply \
    --validate=false \
    -f {{ grayskull_dir }}/crds.yml"

- name: Cert-manager | Apply chart
  helm_chart:
    name: "{{ helm_cert_manager_chart_name }}"
    namespace: "{{ cert_manager_namespace }}"
    bin_dir: "{{ bin_dir }}"
    chart_src: "{{ grayskull_dir }}/{{ helm_cert_manager_image_name }}"
    chart_version: "{{ helm_cert_manager_chart_version }}"

- name: Cert-manager | Check for cfssl
  stat:
    path: "{{ bin_dir }}/cfssl"
  register: cfssl_exists

- name: Cert-manager | Check for cfssljson
  stat:
    path: "{{ bin_dir }}/cfssljson"
  register: cfssljson_exists

- name: Cert-manager | Install cfssl
  block:
    - name: Cert-manager | Download cfssl binary
      get_url:
        url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
        dest: "{{ bin_dir }}/cfssl"
        mode: '0755'

    - name: Cert-manager | Download cfssljson binary
      get_url:
        url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
        dest: "{{ bin_dir }}/cfssljson"
        mode: '0755'
  when: not cfssl_exists.stat.exists or not cfssljson_exists.stat.exists

- name: Cert-manager | List secrets in namespace
  shell: "{{ bin_dir }}/kubectl get secrets -n {{ cert_manager_namespace }}"
  register: cert_manager_secrets

- name: Cert-manager | Create grayskull CA issuer secret
  block:
    - name: Cert-manager | Check if grayskull CA exists
      stat:
        path: "{{ grayskull_ca_path }}.pem"
      register: grayskull_ca

    - name: Cert-manager | Create a self-signed CA
      shell: "{{ bin_dir }}/cfssl gencert -initca {{ grayskull_ca_csrjson_src }} | {{ bin_dir }}/cfssljson -bare {{ grayskull_ca_path }}"
      when: not grayskull_ca.stat.exists

    - name: Cert-manager | Create grayskull CA issuer secret
      shell: "{{ bin_dir }}/kubectl create secret tls {{ grayskull_ca_issuer_secret }} --cert={{ grayskull_ca_path }}.pem --key={{ grayskull_ca_path }}-key.pem -n {{ cert_manager_namespace }}"
  when: grayskull_ca_issuer_secret not in cert_manager_secrets.stdout

- name: Cert-manager | Create kube CA issuer secret
  block:
    - name: Cert-manager | Check if kube CA exists
      stat:
        path: "{{ kube_ca_path }}/kube-ca.pem"
      register: kube_ca

    - name: Cert-manager | Check if alternate CA exists
      stat:
        path: "{{ kube_ca_path }}/ca.crt"
      register: alt_ca
      when: not kube_ca.stat.exists

    - name: Cert-manager | Rename kube CA certificate
      copy:
        src: "{{ kube_ca_path }}/ca.crt"
        dest: "{{ kube_ca_path }}/kube-ca.pem"
        remote_src: true
      when: alt_ca.stat is defined and alt_ca.stat.exists

    - name: Cert-manager | Rename kube CA key
      copy:
        src: "{{ kube_ca_path }}/ca.key"
        dest: "{{ kube_ca_path }}/kube-ca-key.pem"
        remote_src: true
      when: alt_ca.stat is defined and alt_ca.stat.exists

    - name: Cert-manager | Create kube CA issuer secret
      shell: "{{ bin_dir }}/kubectl create secret tls {{ kube_ca_issuer_secret }} --cert={{ kube_ca_path }}/kube-ca.pem --key={{ kube_ca_path }}/kube-ca-key.pem -n {{ cert_manager_namespace }}"
  when: kube_ca_issuer_secret not in cert_manager_secrets.stdout

- name: Cert-manager | List cluster issuer manifests
  set_fact:
    cluster_issuer_templates:
      - { file: cert-manager-grayskull-issuer.yml }
      - { file: cert-manager-kube-issuer.yml }

- name: Cert-manager | Template cluster issuer manifests
  template:
    src: "{{ item.file }}"
    dest: "{{ grayskull_dir }}/{{ item.file }}"
  with_items: "{{ cluster_issuer_templates }}"
  register: cluster_issuer_manifests

- name: Cert-manager | Apply cluster issuer manifests
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ grayskull_dir }}/{{ item.item.file }}"
    state: latest
  with_items: "{{ cluster_issuer_manifests.results }}"
