---

- name: Registry | Delegate tasks
  when:
    - inventory_hostname == groups['kube-setup-delegate'][0]
  block:
  - name: Registry | Create subfolder
    file:
      path: "{{ role_dir }}"
      state: directory
      mode: '0755'

#---- Template out the manifests
  - name: Registry | Templates list
    set_fact:
      registry_role_templates:
        - { file: registry-namespace.yml } 

  - name: Registry | Create manifests
    template:
      src: "{{ item.file }}"
      dest: "{{ role_dir }}/{{ item.file }}"
    with_items: "{{ registry_role_templates }}"
    register: registry_role_manifests
    when:
      - inventory_hostname == groups['kube-master'][0]

  # Namespace must be deployed before secret.
  - name: Registry | Apply manifests
    kube:
      namespace: "{{ registry_namespace }}"
      kubectl: "{{ bin_dir }}/kubectl"
      filename: "{{ role_dir }}/{{ item.item.file }}"
      state: "latest"
    with_items: "{{ registry_role_manifests.results }}"

#---- Generate harbor key
  - name: Setup | Stat for key file
    stat:
      path: "{{ role_dir }}/harbor_key"
    register: stat_result

  - name: Setup | Check for key file or create
    when: stat_result is defined and not stat_result.stat.exists
    block: 
    - name: Setup | Generate key
      set_fact: 
        harbor_key: "{{ (99999999 | random | to_uuid)[0:16] }}"
        cacheable: no

    - name: Setup | Write key to file
      copy: 
        content: "{{ harbor_key }}"
        dest: "{{ role_dir }}/harbor_key"

  - name: Setup | Get key file contents 
    when: stat_result is defined and stat_result.stat.exists
    block:
    - name: Setup | Slurp file
      slurp: 
        src: "{{ role_dir }}/harbor_key"
      register: slurp_contents

    - name: Setup | Reuse key
      set_fact:
        harbor_key: "{{ slurp_contents.content | b64decode }}"

  - name: registry | Check for secret
    shell: "{{ bin_dir }}/kubectl get secrets -n {{ registry_namespace }}"
    register: harbor_key_secret_exists
    changed_when: false

  - name: registry | Apply harbor_key secret
    command: "{{ bin_dir }}/kubectl -n {{ registry_namespace }} create secret generic {{ harbor_encryption_secret_name }} --from-file={{ harbor_encryption_secret_key }}={{ role_dir }}/harbor_key"
    when: "'{{ harbor_encryption_secret_name }}' not in harbor_key_secret_exists.stdout"

#---- Generate harbor pass
  - name: Setup | Stat for pass file
    stat:
      path: "{{ role_dir }}/harbor_pass"
    register: stat_result

  - name: Setup | Check for pass file or create
    when: stat_result is defined and not stat_result.stat.exists
    block: 
    - name: Setup | Generate pass
      set_fact: 
        harbor_pass: "{{ (99999999 | random | to_uuid)[0:5] }}"
        cacheable: no

    - name: Setup | Write pass to file
      copy: 
        content: "{{ harbor_pass }}"
        dest: "{{ role_dir }}/harbor_pass"

  - name: Setup | Get pass file contents 
    when: stat_result is defined and stat_result.stat.exists
    block:
    - name: Setup | Slurp file
      slurp: 
        src: "{{ role_dir }}/harbor_pass"
      register: slurp_contents

    - name: Setup | Reuse pass
      set_fact:
        harbor_pass: "{{ slurp_contents['content'] | b64decode }}"

  - name: registry | Check for secret
    shell: "{{ bin_dir }}/kubectl get secrets -n {{ registry_namespace }}"
    register: harbor_pass_secret_exists
    changed_when: false

  - name: registry | Apply harbor_pass secret
    command: "{{ bin_dir }}/kubectl -n {{ registry_namespace }} create secret generic {{ harbor_pass_secret_name }} --from-file={{ harbor_pass_secret_key }}={{ role_dir }}/harbor_pass"
    when: "'{{ harbor_pass_secret_name }}' not in harbor_pass_secret_exists.stdout"

#---- Get ca.pem to copy

  # We need to give each node the CA so docker/kubernetes trusts the registry
  - name: Registry | Copy CA from remote
    fetch:
      src: "{{ ca_path_remote_src }}"
      dest: "ca.pem"
      flat: yes

#---- Copy CA cert to each node

- name: Registry | Make dest dir
  file:
    dest: "{{ ca_path_dest }}"
    state: directory
    mode: "0755"

- name: Registry | Copy CA to each node
  copy:
    src: "ca.pem"
    dest: "{{ ca_path_dest }}/ca.crt"

- name: Registry | Create docker directory
  file:
    dest: "~/.docker"
    state: directory
    mode: "0755"

# This way nodes can pull from the the private-registry without needing an image pull secret.
- name: Registry | Template docker config.json
  template:
    src: "config.json"
    dest: "~/.docker/config.json"
    backup: yes
  no_log: true    # Prevent the credentials from showing in the logs