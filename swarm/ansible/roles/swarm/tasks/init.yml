---
- name: "Swarm | Template list"
  set_fact:
    swarm_templates:
      - { name: docker-service, file: docker.service, location: /etc/systemd/system/multi-user.target.wants}
      - { name: dockerd-config, file: daemon.json, location: /etc/docker}
  when: inventory_hostname in groups['managers']
        
- name: "Swarm | Configure Docker"
  template:
    src: "{{ item.file}}.j2"
    dest: "{{ item.location }}/{{ item.file }}"
  with_items: "{{ swarm_templates }}"
  register: swarm_files
  when: inventory_hostname in groups['managers']

- name: "Swarm | Restart docker daemon"
  systemd:
    state: restarted
    daemon_reload: yes
    name: docker
  when: inventory_hostname in groups['managers']

- name: "Swarm | Initialize Primary Master"
  docker_swarm:
    state: present
    listen_addr: "{{ swarm_listen_host }}:{{ swarm_listen_port }}"
  register: swarm_info
  when: inventory_hostname in groups['managers'][0]

- name: "Swarm | Join Tokens"
  set_fact: 
    swarm_join_token_manager: "{{ swarm_info.swarm_facts.JoinTokens.Manager }}"
    swarm_join_token_worker: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
    swarm_manager_advertise_addr: "{{ ansible_default_ipv4.address }}"
    swarm_manager_remote_addr: "{{ ansible_default_ipv4.address }}"
    swarm_manager_remote_port: "{{ swarm_listen_port }}"
  when: inventory_hostname in groups['managers'][0]

- name: "Swarm | Join Managers"
  docker_swarm:
    state: join
    listen_addr: "{{ swarm_listen_host }}:{{ swarm_listen_port }}"
  register: swarm_info
  when: inventory_hostname in groups['managers'][0]
